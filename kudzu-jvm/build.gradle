plugins {
    id 'java'
    id 'kotlin'
    id 'jacoco'
    id 'kotlin-platform-jvm'
    id 'info.solidsoft.pitest'
}

group rootProject.group
version rootProject.version

dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7"
    expectedBy project(':kudzu-common')

    // testing
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testCompile "io.strikt:strikt-core:$strikt_version"
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"
}

sourceCompatibility = JavaVersion.VERSION_1_6
compileKotlin {
    kotlinOptions.jvmTarget = "1.6"
}
test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}
pitest {
    targetClasses = ['com.copperleaf.kudzu.*']
    threads = 8
    outputFormats = ['HTML', 'XML']
    jvmArgs = ['-Xmx1024m']
    testPlugin = 'junit5'
}
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

tasks.check.dependsOn 'pitest'
tasks.check.dependsOn jacocoTestReport
tasks.jacocoTestReport.dependsOn 'pitest'

// Code Coverage Reports
//----------------------------------------------------------------------------------------------------------------------
task codeCoverageReport(type: JacocoReport) {
    dependsOn test

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    sourceSets sourceSets.main

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

configurations { codacy }
dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:4.0.2'
}
task sendCoverageToCodacy(type: JavaExec) {
    dependsOn codeCoverageReport

    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l", "Java",
            "-r", "${buildDir}/reports/jacoco/report.xml",
            "-t", "${System.getenv("CODACY_PROJECT_TOKEN")}",
            "--language", "Kotlin"
    ]
}

task deploy {
    doLast {}
}